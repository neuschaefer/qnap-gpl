<chapter id='events'><title>Customizing Event Handling</title>

<para>When <application>apcupsd</application> detects anomalies from
your UPS device, it will make some decisions that usually result in
one or more calls to the script located in
<filename>/etc/apcupsd/apccontrol</filename>. The <emphasis
role="bold">apccontrol</emphasis> file is a shell script that acts on
the first argument that <application>apcupsd</application> passes to
it. These actions are set up by default to sane behavior for all
psituations <application>apcupsd</application> is likely to
detect from the UPS. However, you can change the
<application>apccontrol</application> behavior for every single
action.</para>

<para>To customize, so create a file with the same name as the action,
which is passed as a command line argument. Put your script in the
<filename>/etc/apcupsd</filename> directory.</para>

<para>These events are sent to the system log, optionally sent to the
temporary events file
(<filename>/etc/apcupsd/apcupsd.events</filename>), and they also
generate a call to <filename>/etc/apcupsd/apccontrol</filename> which
in turn will call any scripts you have placed in the
<filename>/etc/apcupsd</filename> directory.</para>

<para>Normally, <filename>/etc/apcupsd/acpcontrol</filename> is called
only by <application>apcupsd</application>. Consequently, you should
not invoke it directly.  However, it is important to understand how it
functions, and in some cases, you may want to change the messages that
it prints using <command>wall</command>. We recommend that you do so
by writing your own script to be invoked by
<command>apccontrol</command> rather than by modifying
<application>apccontrol</application> directly. This makes it easier
for you to upgrade to the next version of
<application>apcupsd</application></para>

<para>In other case, you may want to write your own shell scripts that
will be invoked by <application>apccontrol</application>. For example,
when a power fail occurs, you may want to send an email message to
root. At present the arguments that
<application>apccontrol</application> recognizes are:</para>

<para>When <application>apcupsd</application> detects an event, it
calls the <application>apccontrol</application> script with four
arguments as:</para>

<para>apccontrol &lt;event&gt; &lt;ups-name&gt; &lt;connected&gt;
&lt;powered&gt;</para>

<para>where:</para>
<variablelist>
  <varlistentry>
    <term>event</term>
    <listitem>
      <para>is the event that occurred and it may be any one of the values
      described in the next section.</para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term>ups-name</term>
    <listitem>
      <para>is the name of the UPS as specified in the configuration file
      (not the name in the EEPROM). For version 3.8.2, this is always set
      to <emphasis role="bold">Default</emphasis></para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term>connected</term>
    <listitem>
      <para>is 1 if <application>apcupsd</application> is connected to
      the UPS via a serial port (or a USB port). In most
      configurations, this will be the case. In the case of a Slave
      machine where <application>apcupsd</application> is not directly
      connected to the UPS, this value will be 0.</para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term>powered</term>
    <listitem>
      <para>is 1 if the computer on which
      <application>apcupsd</application> is running is powered by the
      UPS and 0 if not.  At the moment, this value is unimplemented and
       always 0.</para> 
    </listitem>
  </varlistentry>
</variablelist>

<sect1><title><application>apccontrol</application> Command Line Options</title>

<para><application>apccontrol</application> accepts the following
command line options:</para>

<variablelist>
  <varlistentry>
    <term>annoyme</term>
    <listitem>
      <para>When a shutdown is scheduled, and the time 
      specified on the ANNOYME directive in the apcupsd.conf file
      expires, this event is generated.</para>
      <para>Default -- does a <command>printf
      &quot;Power problems please logoff.&quot; | wall</command>
       then exits.</para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term>changeme</term>
    <listitem>
      <para>When apcupsd detects that the mains are on, but the 
      battery is not functioning correctly, this event is generated.
      It is repeated every x hours.</para>
      <para>Default -- does a  <command>printf
      &quot;Emergency! UPS batteries have failed\nChange them NOW&quot; |
      wall</command>  then exits.</para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term>commfailure</term>
    <listitem>
      <para>This event is generated each time the communications line
      with the computer is severed. This event is not detected on
      dumb signaling UPSes.</para>
      <para>Default -does a <command>printf
      &quot;Warning serial port communications with UPS lost.&quot; |
      wall</command>  then exits.</para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term>commok</term>
    <listitem>
      <para>After a commfailure event is issued, when the communications
      to the computer is re-established, this event will be generated.
      </para>
      <para>Default -- does a <command>printf
      &quot;Serial communications with UPS restored.&quot; | wall</command>
      then exits.</para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term>doreboot</term>
    <listitem>
      <para>This event is depreciated and should not be used.</para>
      <para>Default - does a reboot of the system by calling 
      <command>shutdown -h now</command></para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term>doshutdown</term>
    <listitem>
      <para>When the UPS is running on batteries and one of the limits
      expires (time, run, load), this event is generated to cause
      the machine to shutdown.</para>
      <para>Default does a shutdown of the system by calling
      <command>shutdown -h now</command></para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term>emergency</term>
    <listitem>
      <para>Does an emergency shutdown of the system by calling
      <command>shutdown -h now</command></para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term>failing</term>
    <listitem>
      <para>This event is generated when the UPS is running on
      batteries and the battery power is exhausted. The event following
      this one will be a shutdown.</para>
      <para>Default -- does a <command>printf &quot;UPS battery power
      exhausted. Doing shutdown.\n&quot; | wall</command> then
      exits.</para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term>loadlimit</term>
    <listitem>
      <para>This event is generated when the battery charge is 
      below the low limit specified in the apcupsd.conf file.</para>
      <para>Default -- does a  <command>printf &quot;UPS battery
      discharge limit reached. Doing shutdown.\n&quot; | wall</command>
       then exits.  After completing this event,
      <application>apcupsd</application> will immediately initiate a
       <command>doshutdown</command> event.</para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term>mainsback</term>
    <listitem>
      <para>This event is generated when the mains power returns
      after a powerout condition. The shutdown event may or 
      may not have been generated depending on the paramaters
      you have defined and the length of the power outage.
      A cancel of a shutdown should never be attempted as it
      is very unlikely to succeed and will almost surely leave
      your machine in a indeterminate state.</para>
      <para>Default -- attempts to cancel the shutdown with a 
      <command>shutdown -c</command> (not sure about that!!!!)</para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term>onbattery</term>
    <listitem>
      <para>This event is generated 5 or 6 seconds after an
      initial powerfailure is detected. It means that apcupsd definitely
      considers the UPS to be on batteries. The onset of this
      event can be delayed by the ONBATTERYDELAY apcupsd.conf 
      configuration directive.</para>
      <para>Default -- does a <command>printf &quot;Power
      failure. Running on UPS batteries.&quot; | wall</command>
      then exits.</para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term>offbattery</term>
    <listitem>
      <para>This event is generated when the mains return only
      if the onbattery event has been generated.</para>
      <para>Default -- does nothing.</para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term>powerout</term>
    <listitem>
      <para>This event is generated immediately when apcupsd detects
      that the UPS has switched to batteries. It may be due to a 
      short powerfailure, an automatic selftest of the UPS, or
      a longer powerfailure. In many cases, you may want to 
      inhibit the normal message sent/emailed by this event to 
      avoid being annoyed by short power failures.</para>
      <para>Default -- does a <command>printf &quot;Warning power
      loss detected.&quot; | wall</command> then exits.</para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term>remotedown</term>
    <listitem>
      <para>This event is generated on a slave machine when it detects
      either that the master has shutdown, or that a onbattery situation
      exists and the communications line has been severed.
      Despite the name, you should never reboot the machine -- instead
      always shut it down.</para>
      <para>Does a  <command>shutdown -h now</command></para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term>restartme</term>
    <listitem>
      <para>This event is depreciated and should not be used.</para>
      <para>Terminates the currently running
      <application>apcupsd</application> and then restarts it.</para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term>runlimit</term>
    <listitem>
      <para>This event is generated when the MINUTES value defined
      in the apcupsd.conf file expires while in a power fail condition.
      The MINUTES is the remaining runtime as internally calculated
      by the UPS and monitored by apcuspd.
      </para>
      <para>Does a <command>printf &quot;UPS battery
      runtime percent reached. Doing shutdown.\n&quot; |
      wall</command>  then exits.  After completing this
      event, <application>apcupsd</application> will immediately
      initiate a <command>doshutdown</command> event.</para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term>timeout</term>
    <listitem>
      <para>This event is generated when the TIMOUT value defined
      in the apcupsd.conf file expires while in a power fail condition.
      It indicates that the total time in a power failure has been
      exeeded and the machine should be shutdown. Normally, with
      smart UPSes, this value is not used, but rather one relies
      on the remaining runtime (MINUTES) or the battery level
      (BATTERYLEVEL) values specified in the conf file.
      </para>
      <para>Does a <command>printf &quot;UPS battery
      runtime limit exceeded. Doing shutdown.\n&quot; | wall</command>
       then exits. After completing this event,
      <application>apcupsd</application> will immediately initiate a
      <command>doshutdown</command> event.</para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term>startselftest</term>
    <listitem>
      <para>This event is generated when apcupsd detects a 
      self test by the UPS. Normally due to the 6 second onbattery
      delay default time, self test events are not detected.</para>

      <para>This is called when <application>apcupsd</application>
      detects that the UPS is doing a self test. No action is taken.</para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term>endselftest</term>
    <listitem>
      <para>This event is generated when the end of a self test
      is detected.</para>
      <para>This is called when <application>apcupsd</application>
      determines that a self test has been completed. No action is
      taken.</para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term>mastertimeout</term>
    <listitem>
      <para>This event is generated when a slave detects that
      a master has not contacted it in a reasonable time, or
      when a slave polls a master and gets no response in 30 seconds.
      </para>
      <para>No action is taken.</para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term>masterconnect</term>
    <listitem>
      <para>This event is generated when the slave and the
      master reconnect. </para>
      <para>No action is taken.</para>
    </listitem>
  </varlistentry>

</variablelist>

<para>To write your own routine for the <emphasis
role="bold">powerout</emphasis> action, you create shell script named
<emphasis role="bold">powerout</emphasis> and put it in the lib
directory (normally <filename>/etc/apcupsd</filename>). When the
<emphasis role="bold">powerout</emphasis> action is invoked by
<application>apcupsd</application>,
<application>apccontrol</application> will first give control to your
script. If you want <application>apccontrol</application> to continue
with the default action, simply exit your script with an exit status
of zero. If you do not want <application>apccontrol</application> to
continue with the default action, your script should exit with the
special exit code of <emphasis role="bold">99</emphasis>. However, in
this case, please be aware that you must ensure proper shutdown of
your machine if necessary.</para>

<para>Some sample scripts (onbattery and mainsback) that email power
failure messages can be found in the <filename>examples</filename>
directory of the source code.</para>
</sect1>
</chapter>
