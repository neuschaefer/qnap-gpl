<chapter id='monitoring'><title>Monitoring and Tuning your UPS</title>

<para>After you have verified that your UPS is working correctly, you 
will probably want to query the state of its health occasionally.
The tools <application>apcupsd</application> gives you to do this 
include one command-line utility (<application>apcaccess</application>) 
and a GUI you can use through a Web browser.  You can also use
<application>apctest</application> to tune some parameters of the UPS 
itself.</para>

<sect1><title>apcaccess</title>

<para><application>apcaccess</application> is a program (normally found
in <filename>/sbin/apcaccess</filename>) that permits you to print out
the complete status of your UPS. Although there are a number of
command line arguments (<emphasis role="bold">eprom, reconfig,
status, slave, shutdown</emphasis>), all except <emphasis
role="bold">eprom</emphasis> and <emphasis
role="bold">status</emphasis> are under development and hence do not
work reliably.</para>

<para>If you have built <application>apcupsd</application> with
pthreads enabled (default), <application>apcaccess</application> will use the
Network Information Server to obtain the necessary information for the
<emphasis role="bold">status</emphasis> and <emphasis
role="bold">eeprom</emphasis> commands. This is because in the
pthreaded version, there is no IPC shared memory. In this case
(pthreads enabled), you can specify a second optional argument to
<application>apcaccess</application> in the form of host:port, where
the :port is optional. The default is <emphasis
role="bold">localhost:3551</emphasis>. Please note that in versions
prior to 3.10.6, the default NIS port was 7000, so if you are mixing
versions, you will need to take a lot of care to ensure that all
components are using the same port.</para>
<para>
To enable the
<application>apcupsd</application> Network Information Server, which
is normally the default, you set:
<programlisting>
NETSERVER on
NISPORT 3551
</programlisting>
in your <emphasis role="bold">apcupsd.conf</emphasis> file.</para>


<sect2><title>apcaccess status</title>
<para>
As mentioned above, the full form of the command is:
</para>
<programlisting>
apcaccess status localhost:3551 
</programlisting>
<para>
where only <application>apcaccess status</application> should normally
be needed. localhost may be replaced by any machine name, fully qualified 
domain name, or IP address, which means that <application>apcaccess</application>
can access any UPS on the network running the Network Information Server.
</para>

<para>The <emphasis role="bold">status</emphasis> command line option
of <application>apcaccess</application> will produce a full printout
of all the <emphasis role="bold">STATUS</emphasis> variables used by
<application>apcupsd</application>. This can be very helpful for
checking the condition of your UPS and to know whether or not
<application>apcupsd</application> is properly connected to it. For a
complete description of the variables and their meanings, please read
the <link linkend='statusformat'>Status Format</link> section of the
Technical Reference.</para>

<para>Please note that if you invoke
<application>apcaccess</application> within the first 30 seconds of
launching <application>apcupsd</application>, you will likely get an
error message such as:</para>

<programlisting>
APCACCESS FATAL ERROR in apcipc.c at line 325
attach_shmarea: shared memory version mismatch
</programlisting>

<para>This is because <application>apcupsd</application> is still in
the process of initializing the shared memory segment used to
communicate between the two processes. There is also a small window of
time after which the memory segment is properly initialized but before
the UPS has been completely polled. If you invoke
<application>apcaccess</application> during this period, you will get
the STATUS output, but with many of the values zero. The solution is
to wait at least 30 seconds after starting
<application>apcupsd</application> before launching
<application>apcaccess</application>.</para>

<para>To invoke apcaccess, enter:</para>

<programlisting>
apcaccess status
</programlisting>

<para>For a SmartUPS 1000 <application>apcaccess</application> will
emit the following output:</para>

<programlisting>
DATE     : Fri Dec 03 12:34:26 CET 1999
HOSTNAME : matou
RELEASE  : 3.7.0-beta-1
CABLE    : Custom Cable Smart
MODEL    : SMART-UPS 1000
UPSMODE  : Stand Alone
UPSNAME  : UPS_IDEN
LINEV    : 232.7 Volts
MAXLINEV : 236.6 Volts
MINLINEV : 231.4 Volts
LINEFREQ : 50.0 Hz
OUTPUTV  : 232.7 Volts
LOADPCT  :  11.4 Percent Load Capacity
BATTV    : 27.7 Volts
BCHARGE  : 100.0 Percent
MBATTCHG : 5 Percent
TIMELEFT : 112.0 Minutes
MINTIMEL : 3 Minutes
SENSE    : Low
DWAKE    : 060 Seconds
DSHUTD   : 180 Seconds
LOTRANS  : 204.0 Volts
HITRANS  : 253.0 Volts
RETPCT   : 050.0 Percent
STATFLAG : 0x08 Status Flag
STATUS   : ONLINE 
ITEMP    : 29.2 C Internal
ALARMDEL : Low Battery
LASTXFER : U command or Self Test
SELFTEST : NO
STESTI   : 336
DLOWBATT : 02 Minutes
DIPSW    : 0x00 Dip Switch
REG1     : 0x00 Register 1
REG2     : 0x00 Register 2
REG3     : 0x00 Register 3
MANDATE  : 01/05/99
SERIALNO : GS9902009459
BATTDATE : 01/05/99
NOMOUTV  : 230.0
NOMBATTV :  24.0
HUMIDITY : N/A
AMBTEMP  : N/A
EXTBATTS : 0
BADBATTS : N/A
FIRMWARE : 60.11.I
APCMODEL : IWI
END APC  : Fri Dec 03 12:34:33 CET 1999
</programlisting>

<para>
For the various smaller, cheaper APC USB UPSes, such as the CS, ES, ..., you 
will get much of the information that is presented above, but not all of
it. For example, you will not get MAXLINEV, MINLINEV, LINEFREQ, ...
and in particular, the LOADPCT will be zero when you are running on mains.
LOADPCT will display when the UPS is on batteries.  You must remember that the     
non-SmartUPSes are much simpler (and less expensive) and therefore produce 
less information.</para>

</sect2>

<sect2><title>apcaccess eprom</title>

<para>The <emphasis role="bold">eprom</emphasis> command line option
for <application>apcaccess</application> allows you to examine the
current values of your UPS' EPROM as well as to know the permitted
values that can be set in the EPROM. For information about changing
these values, see the section on <link linkend='eeprom'>tuning EEPROM
parameters</link>.</para>

<para>A typical output from <command>apcaccess eprom</command> is:</para>

<programlisting>
Valid EPROM values for the SMART-UPS 1000

                       Config        Current  Permitted
Description              Directive     Value    Values
===================================================================
Upper transfer voltage   HITRANSFER    253      253 264 271 280 
Lower transfer voltage   LOTRANSFER    208      196 188 208 204 
Return threshold         RETURNCHARGE  15       00 15 50 90 
Output voltage on batts  OUTPUTVOLTS   230      230 240 220 225 
Sensitivity              SENSITIVITY   H        H M L L 
Low battery warning      LOWBATT       2        02 05 07 10 
Shutdown grace delay     SLEEP         180      020 180 300 600 
Alarm delay              BEEPSTATE     T        0 T L N 
Wakeup delay             WAKEUP        60       000 060 180 300 
Self test interval       SELFTEST      336      336 168 ON  OFF 
</programlisting>
</sect2>
</sect1>

<sect1 id='notification'><title><application>Apcupsd</application> Notification and Events</title>
<para>
When a major event is generated within <application>apcupsd</application>,
control is passed to the script <filename>apccontrol</filename> normally
found in <filename>/etc/apcupsd/apccontrol</filename>. The event name,
and a number of other important parameters are passed to the script.
</para>
<para>
The major function of the <filename>apccontrol</filename> script is
to performa a shutdown of the system (as well as the killpower
operation). In addition, another major task for this script is to
notify you by email when certain events such as powerfail occur.
</para>
<para>
Since <filename>apccontrol</filename> is a script, you can 
customize it to your own needs using any text editor. To do 
so, you must have a minimal knowledge of Unix shell programming.
In addition, another feature is that you can write your own 
scripts that will be automatically called by <filename>apccontrol</filename>
before any of its own code is executed.
Details of the events and how to program them are contained in
the Advanced topics section entitled <link linkend='events'>
Customizing Event Handling</link>.
</para>
</sect1>

<sect1><title><application>hid-ups</application> and USB Specific Information</title>

<para>The UPS has an internal set of timers and remaining capacity
counters, which it uses to determine when to shutdown. These are in
addition to the <application>apcupsd</application> counters
BATTERYLEVEL and MINUTES.  As a consequence,
<application>apcupsd</application> will shutdown on the first limit
that triggers (either an <application>apcupsd</application> limit, or
a UPS limit). The UPS internal counter equivalent to BATTERYLEVEL can
be found in the <application>hid-ups</application> report as
RemainingCapacityLimit, which is typically factory set to 10
percent. In addition, the Low Battery signal is normally given by the
UPS when less than 2 minutes of run time remain.</para>
</sect1>

<sect1 id='cgiprogs'><title><application>apcupsd</application> Network Monitoring (CGI)
Programs</title>

<para>With this release, there are five CGI programs
(<application>multimon.cgi</application>,
<application>multimoncss.cgi</application>,
<application>upsstats.cgi</application>,
<application>upsfstats.cgi</application>, and
<application>upsimage.cgi</application>). To have them properly
installed, you must run the <command>./configure</command> command
with <option>--enable-cgi</option> and you should specify an
installation directory with <option>--with-cgi-bin=</option> or load
them manually. To install the Cascading Style Sheet, which is used by
<application>multimoncss.cgi</application>, you must use the
<option>--with-css-dir=</option> option. The default directory for
installation of the CGI programs is <filename>/etc/apcupsd</filename>,
which is not really where you want them if you are going to use them.
Normally, they should go in the <filename>cgi-bin</filename> of your
Web server.</para>

<para>Once built and loaded, they will give you the status of your UPS
or UPSes over the network.</para>

<para>Normally only <command>multimon.cgi</command> or
<application>multimoncss.cgi</application>is directly invoked by the
user. However, it is possible to directly invoke
<application>upsstats.cgi</application> and
<application>upsfstats.cgi</application>.
<application>upsimage.cgi</application> should never be directly
invoked as it is used by <application>upsstats.cgi</application> to
produce the bar charts.</para>
</sect1>

<sect1 id='CGI-setup'><title>Setting up and Testing the CGI Programs</title>

<sect2><title>Network Information Server (NIS)</title>
<para>Before using <application>multimon</application> and the other
CGI programs, first ensure that <application>apcupsd</application> is
configured to run the Network Information Server. This is done by
setting <emphasis role="bold">NETSERVER on</emphasis> in
<filename>/etc/apcupsd/apcupsd.conf</filename>.  This switch is on by
default.  If you are unsure of its state, see the section at the end
of this chapter concerning the Client test program.</para>

<para>Next you must edit the <filename>hosts</filename> file
<filename>/etc/apcupsd/hosts.conf</filename> and at the end, add the
name of the hosts you want to monitor and a label string for them. Kern
Sibbald uses <filename>multimon.conf</filename> unmodified from what
is on the source distribution. However, he has modified the hosts.conf
file to contain the following three lines:</para>

<programlisting>
MONITOR matou &quot;Server&quot;
MONITOR polymatou &quot;Backup server&quot;
MONITOR deuter  &quot;Disk server&quot;
</programlisting>

<para>matou, polymatou, and deuter are the network names of the three
machines currently running <application>apcupsd</application>. Please
note that the network names may either be IP addresses or fully
qualified domain names.  The network name (or IP address) may
optionally be followed by <emphasis
role="bold">:&lt;port&gt;</emphasis>, where the port is the NIS port
address you wish to use. This is useful if you are running multiple
copies of <application>apcupsd</application> on the same system or if
you are running in a mixed vendor environment where the NIS port
assignments differ. An example could be the following:</para>

<programlisting>
MONITOR matou &quot;Server&quot;
MONITOR polymatou &quot;Backup server&quot;
MONITOR deuter  &quot;Disk server&quot;
MONITOR polymatou:7001 &quot;APC USB UPS&quot;
</programlisting>

<para>where the USB copy of <application>apcupsd</application> has
been configured to use port 7001 (with
<option>--with-nis-port=7001</option> on the
<command>./configure</command> or by modifying
<filename>apcupsd.conf</filename>). Note, the default NIS port is 3551
on most platforms.</para>

<para>To test multimon.cgi, you can execute it as non-root directly
from the source cgi build directory. To do so, enter at a shell
prompt:</para>

<programlisting>
./multimon.cgi
</programlisting>

<para>If everything is set up correctly, it will print a bunch of HTML
with the values of the machines that you have put in the
<filename>hosts.conf</filename> file. It should look something like
the following (note, only a small portion of the output is reproduced
here):</para>

<programlisting>
Content-type: text/html

&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.0 Transitional//EN&quot;
     &quot;http://www.w3.org/TR/REC-html40/loose.dtd&quot;&gt;
&lt;HTML&gt;
&lt;HEAD&gt;&lt;TITLE&gt;Multimon: UPS Status Page&lt;/TITLE&gt;&lt;/HEAD&gt;
&lt;BODY BGCOLOR=&quot;#FFFFFF&quot;&gt;
&lt;TABLE BGCOLOR=&quot;#50A0A0&quot; ALIGN=CENTER&gt;
&lt;TR&gt;&lt;TD&gt;
&lt;TABLE CELLPADDING=5&gt;
&lt;TR&gt;
&lt;TH COLSPAN=10 BGCOLOR=&quot;#60B0B0&quot;&gt;
&lt;FONT SIZE=&quot;+2&quot;&gt;APCUPSD UPS Network Monitor&lt;/FONT&gt;
&lt;BR&gt;Sun Jan 16 12:07:27 CET 2000&lt;/TH&gt;
&lt;/TR&gt;
&lt;TR BGCOLOR=&quot;#60B0B0&quot;&gt;
&lt;TH COLSPAN=1&gt;System&lt;/TH&gt;
&lt;TH COLSPAN=1&gt;Model&lt;/TH&gt;
&lt;TH COLSPAN=1&gt;Status&lt;/TH&gt;
...
</programlisting>

<para>If you do not get similar output, check the permissions of the
<filename>/etc/apcupsd</filename> directory and of those of
<filename>/etc/apcupsd/hosts.conf</filename> to ensure that your web
server can access it. At many sites such as mine, the Apache server is
not running as root, so you must be careful to ensure that that
<filename>/etc/apcupsd/hosts.conf</filename> and
<filename>/etc/apcupsd/multimon.conf</filename> are world
readable.</para>

<para>To invoke <application>multimon</application> in your Web
browser, enter:</para>

<para>http://&lt;your-site&gt;/cgi-bin/multimon.cgi</para>

<para>You should get something similar to the screen shot shown below.</para>

<para>If you wish additional control over the colors, type faces, and
sizes of the multimon output, you might wish to use
<application>multimoncss.cgi</application> in place of multimon. In
this case, you simply edit the <filename>multimon.css</filename> file
to specify the styles you prefer.  There are several sample Style
Sheet files in the <filename>cgi</filename> subdirectory
of the source tree.</para>

<para>To see a working example of the these programs, visit <ulink url="http://www.apcuspd.com/cgi-bin/multimon.cgi">http://www.apcupsd.com/cgi-bin/multimon.cgi</ulink>
or <ulink url="http://www.apcupsd.com/cgi-bin/multimoncss.cgi">http://www.apcupsd.com/cgi-bin/multimoncss.cgi</ulink></para>
</sect2>

<sect2><title>multimon.cgi</title>

<para>This program monitors multiple UPSes at the same time. A typical
output of <application>multimon.cgi</application> as displayed in your
Web browser might look like the following:</para>

<mediaobject>
  <imageobject>
    <imagedata fileref="multimon.png" depth="210" width="862"/>
  </imageobject>
</mediaobject>

<para>The machines monitored as well as the values and their column
headings are all configurable (see
<filename>/etc/apcupsd/hosts.conf</filename> and
<filename>/etc/apcupsd/multimon.conf</filename>)</para>
</sect2>

<sect2><title>upsstats.cgi</title>

<para>By clicking on the <emphasis role="bold">system</emphasis> name
in the <emphasis role="bold">multimon.cgi</emphasis> display, you will
invoke <application>upsstats.cgi</application> for the specified
system, which will produce a bar graph display of three of the
monitored values. For example,</para>

<mediaobject>
  <imageobject>
    <imagedata fileref="status.png" depth="636" width="846"/>
  </imageobject>
</mediaobject>

<para>You can display different bar graphs by selecting different
variables from the drop down menus at the top of each of the three
bar graphs.</para>

<para>As with <application>multimon</application>, if you have your
local host configured in the
<filename>/etc/apcupsd/hosts.conf</filename> file, you can execute it
from a Unix shell from the source cgi directory as follows:</para>
</sect2>

<sect2><title>./upsstats.cgi</title>

<para>As with <application>multimon</application>, quite a few lines
of html should then be displayed.</para> 
</sect2>

<sect2><title>upsfstatus.cgi</title>

<para>If you would like to see all of the STATUS variables available
over the network, click on the <emphasis role="bold">Data</emphasis>
field of the desired system, and your browser will display something
like the following:</para>

<programlisting>
APC      : 001,048,1109
DATE     : Thu Dec 02 17:27:21 CET 1999
HOSTNAME : matou.sibbald.com
RELEASE  : 3.7.0-beta-1
CABLE    : Custom Cable Smart
MODEL    : SMART-UPS 1000
UPSMODE  : Stand Alone
UPSNAME  : UPS_IDEN
LINEV    : 223.6 Volts
MAXLINEV : 224.9 Volts
MINLINEV : 222.3 Volts
LINEFREQ : 50.0 Hz
OUTPUTV  : 223.6 Volts
LOADPCT  :   6.2 Percent Load Capacity
BATTV    : 27.9 Volts
BCHARGE  : 100.0 Percent
MBATTCHG : 5 Percent
TIMELEFT : 167.0 Minutes
MINTIMEL : 3 Minutes
SENSE    : High
DWAKE    : 060 Seconds
DSHUTD   : 020 Seconds
LOTRANS  : 196.0 Volts
HITRANS  : 253.0 Volts
RETPCT   : 050.0 Percent
STATFLAG : 0x08 Status Flag
STATUS   : ONLINE 
ITEMP    : 35.1 C Internal
ALARMDEL : Low Battery
LASTXFER : U command or Self Test
SELFTEST : NO
STESTI   : 336
DLOWBATT : 02 Minutes
DIPSW    : 0x00 Dip Switch
REG1     : 0x00 Register 1
REG2     : 0x00 Register 2
REG3     : 0x00 Register 3
MANDATE  : 01/11/99
SERIALNO : GS9903001147
BATTDATE : 01/11/99
NOMOUTV  : 230.0
NOMBATTV :  24.0
HUMIDITY : N/A
AMBTEMP  : N/A
EXTBATTS : 0
BADBATTS : N/A
FIRMWARE : 60.11.I
APCMODEL : IWI
END APC  : Thu Dec 02 17:27:25 CET 1999
</programlisting>

<para>You should get pretty much the same output mixed in with html if
you execute <application>upsfstats.cgi</application> directly from a
Unix shell in the cgi subdirectory as explained above for
<application>upsstats.cgi</application> and
<application>multimon.cgi</application>.</para>
</sect2>

<sect2><title>Working Example</title>

<para>To see a working example of the above programs, visit <ulink
url="http://www.apcupsd.com/cgi-bin/multimon.cgi">http://www.apcupsd.com/cgi-bin/multimon.cgi</ulink>.</para>
</sect2>

<sect2 id='client-program'><title>Client Test Program</title>
<para>When your Network Information Server is up and running, you can
test it using a simple program before attempting to access the server
via your Web server. The test program is called
<filename>client.c</filename> and can be found in the
<filename>examples</filename> subdirectory of the source
distribution. To build the program, when in the examples directory,
use something like the following:</para>

<programlisting>
cc client.c ../lib/libapc.a -o client
</programlisting>

<para>Then execute it:</para>

<programlisting>
./client &lt;host&gt;[:&lt;port&gt;] [&lt;command&gt;]
</programlisting>

<para>Where <emphasis role="bold">host</emphasis> is the name of the
host or the IP address of the host running the Network Information
Server. The default is the local host. You may optionally specify a
port address separated from the host name with a colon. You may also
optionally specify a single command to be executed. If you specify a
command, that command will be executed and the client program will
exit. This is a very simple and useful way of pulling the <emphasis
role="bold">status</emphasis> or <emphasis
role="bold">events</emphasis> data into another program such as
Perl.</para>

<para>If no error messages are printed, it has most likely established
contact with your server. Anything that you type as standard input
will be passed to the server, and anything the server sends back will
be printed to standard output. There are currently two commands
recognized by the server: <emphasis role="bold">events</emphasis> and
<emphasis role="bold">status</emphasis>.  Hence the following
commands:</para>

<programlisting>
./client
status
events
xyz
^D
</programlisting>

<para>should produce the status listing (the same as produced by
<command>apcaccess status</command>), followed by the list of the last
10 events (in response to the <emphasis role="bold">events</emphasis>
command), and finally <emphasis role="bold">Invalid command</emphasis>
in response to the <emphasis role="bold">xyz</emphasis> input, which
is not a valid command. The control-D terminates the <emphasis
role="bold">client</emphasis> program.</para>
<para>
The purpose of this program is to show you how to write your own
program that can determine the status of <application>apcupsd</application> 
and act any way you want (e.g. send you email messages on certain
events like line voltage boost, ...).</para>
</sect2>

<sect2><title>A Tip from Carl Erhorn for Sun Systems</title>

<para>It is possible to run the CGI code to monitor your UPS using the
answerbook HTTP server that runs on Solaris. As long as your server
has the Answerbook2 web server installed and running, you can
insert the cgi scripts into the cgi directory of the web server,
and access the cgi using something like:</para>

<para>http://hostname:8888/cgi/multimon.cgi</para>
</sect2>

<sect2><title>Credits</title>

<para>Many thanks go to Russell Kroll &lt;rkroll at exploits.org&gt; who
wrote the CGI programs to work with his UPS Monitoring system named
<ulink url="http://www.exploits.org/nut/library/apcsmart.html">Network
UPS Tools (NUT)</ulink>. Thanks also to Jonathan Benson &lt;jbenson at
technologist.com&gt; for initially adapting the upsstatus.cgi
program to work with <application>apcupsd</application>.</para>

<para>We have enhanced the bar graph program and hope that our changes
can be useful to the original author in his project.</para>
</sect2>

<sect2><title>Security Issues</title>

  <itemizedlist>
    <listitem>
      <para><emphasis role="bold">apcupsd</emphasis> runs as root.</para>
    </listitem>
    <listitem>
      <para>If you have <emphasis role="bold">NETSERVER ON</emphasis>
      in your <filename>apcupsd.conf</filename> file (which is the
      deault), be aware that anyone on the network can read the status
      of your UPS.  This may or may not pose a problem. If you don't
      consider this information privileged, as is the case for me,
      there is little risk. In addition, if you have a firewall
      between your servers and the Internet, crackers will not have
      access to your UPS information.  Additionally, you can restrict
      who can access your <application>apcupsd</application> server by
      using <application>inted</application> to run the sservice and using
      access control lists with a TCP wrapper or by configuring TCP
      wrappers in <application>apcupsd</application> (see below
      for TCP Wrapper details).</para>
    </listitem>
    <listitem>
      <para>If you are running master/slave networking with a single UPS
      powering multiple machines, be aware that it is possible for
      someone to simulate the master and send a shutdown request to your
      slaves. The slaves do check that the network address of the machine
      claiming to be the master is that same as the address returned by
      DNS corresponding to the name of the master as specified in your
      configuration file.</para>
    </listitem>
  </itemizedlist>

<sect3><title>TCP Wrappers</title>

<para>As of apcupsd version 3.8.2, TCP Wrappers are implemented if you
turn them on when configuring (<command>./configure
--with-libwrap</command>).  With this code enabled, you may control
who may access your <application>apcupsd</application> via TCP
connections (the Network Information Server, and the Master/Slave
code). This control is done by modifying the file:
<filename>/etc/hosts.allow</filename>. This code is implemented but
untested. If you use it, please send us some feedback.</para>
</sect3>
</sect2>

</sect1>

<sect1 id='eeprom'><title>Configuring Your EEPROM</title>

<para>If you have a SmartUPS, there are depending on the UPS at least 12
different values stored in the EEPROM that determine how the UPS
reacts to various conditions such as high line voltage, low line
voltage, power down grace periods, etc.</para>

<para>In general, for the moment, we do not recommend that you change
your EEPROM values unless absolutely necessary. There have been
several reported cases of problems setting the Low Transfer
Voltage. Consequently, if at all possible, do not attempt to change
this value.</para>

<para>If despite these warnings, you must change your EEPROM, we
recommend connecting your UPS to a Windows or NT machine running
PowerChute and making the changes.</para>

<sect2><title><application>apcupsd</application> No Longer Configures EEPROM</title>

<para>Unlike version 3.8.6, apcupsd version 3.10.x no longer has code
to program the EEPROM. Instead we have implemented interactive EEPROM
modification code in the <application>apctest</application>
program. EEPROM programming must be done with
<application>apcupsd</application> stopped so that
<application>apctest</application> can access the UPS. In addition,
EEPROM programming is currently implemented only for UPSes using the
Smart protocol running in serial mode. Perhaps at a later time when
the appropriate kernel modifications are standard, we will extend
EEPROM programming to USB models.</para>

<para>Before changing your EEPROM, you should make a printed copy of
the current state of your UPS before any EEPROM changes so that you
can check the changes that you have made. Do so by printing a copy
of the output from <command>apcaccess status</command> and also print a copy of
the output from <command>apcaccess eprom</command>.</para>

<para>Once this is done, choose which values of the EEPROM you want to
change. Typical output from <application>apcaccess</application>
should look like the following:</para>

<programlisting>
apcaccess eeprom

Valid EPROM values for the SMART-UPS 1000

                       Config        Current  Permitted
Description              Directive     Value    Values
================================================================
Upper transfer voltage   HITRANSFER    253      253 264 271 280 
Lower transfer voltage   LOTRANSFER    196      196 188 208 204 
Return threshold         RETURNCHARGE  0        00 15 50 90 
Output voltage on batts  OUTPUTVOLTS   230      230 240 220 225 
Sensitivity              SENSITIVITY   H        H M L L 
Low battery warning      LOWBATT       2        02 05 07 10 
Shutdown grace delay     SLEEP         20       020 180 300 600 
Alarm delay              BEEPSTATE     0        0 T L N 
Wakeup delay             WAKEUP        0        000 060 180 300 
Self test interval       SELFTEST      336      336 168 ON  OFF 
</programlisting>

<para>where the Current Value will depend on how your UPS is configured,
and the Permitted Values will depend on what UPS model you have.</para>

</sect2>
<sect2><title>Using apctest to Configure Your EEPROM</title>

<para>To make the EEPROM changes with
<application>apctest</application> you must first stop the
<application>apcupsd</application> daemon</para>

<para><application>apctest</application> is not installed during the
installation process, so to use it you will need to do the following
after having built <application>apcupsd</application>:</para>

<programlisting>
cd &lt;apcupsd-source&gt;/src
su           
&lt;root-password&gt;
./apctest
</programlisting>

<para>At that point, you should get output similar to the following:</para>

<programlisting>
2003-07-07 11:19:21 apctest 3.10.6 (07 July 2003) redhat
Checking configuration ...
Attached to driver: apcsmart
sharenet.type = DISABLE
cable.type = CUSTOM_SMART

You are using a SMART cable type, so I'm entering SMART test mode
mode.type = SMART
Setting up serial port ...
Creating serial port lock file ...
Hello, this is the apcupsd Cable Test program.
This part of apctest is for testing Smart UPSes.
Please select the function you want to perform.

1) Query the UPS for all known values
2) Perform a Battery Runtime Calibration
3) Abort Battery Calibration
4) Monitor Battery Calibration progress
5) Program EEPROM
6) Enter TTY mode communicating with UPS
7) Quit

Select function number: 
</programlisting>

<para>You might want to run option 1) just to ensure that
<application>apctest</application> is properly talking to your UPS. It
will produce quite about 70 lines of output.</para>

<para>To program the EEPROM, select option 5), and you will get the
EEPROM menu as follows:</para>

<programlisting>
This is the EEPROM programming section of apctest.
Please select the function you want to perform.

1) Print EEPROM values
2) Change Battery date
3) Change UPS name
4) Change sensitivity
5) Change alarm delay
6) Change low battery warning delay
7) Change wakeup delay
8) Change shutdown delay
9) Change low transfer voltage
10) Change high transfer voltage
11) Change battery return threshold percent
12) Change output voltage when on batteries
13) Change the self test interval
14) Set EEPROM with conf file values
15) Quit

Select function number: 
</programlisting>

<para>If you wish to use the old pre-3.10.x method of EEPROM
programming with values specified in the
<filename>apcupsd.conf</filename> file, select option 14). However, we
recommend that you start with item 1) to see what EEPROM values
<application>apctest</application> finds. This command can take a few
minutes to run, so be patient. The values printed should be the same
as what you got using <application>apcaccess</application>, but in
addition, the EEPROM battery date and UPS Name should be
displayed. For example:</para>

<programlisting>
Select function number: 1

Doing prep_device() ...

Valid EEPROM values for the SMART-UPS 1000

                       Config        Current  Permitted
Description              Directive     Value    Values
===================================================================
Upper transfer voltage   HITRANSFER    253      253 264 271 280 
Lower transfer voltage   LOTRANSFER    196      196 188 208 204 
Return threshold         RETURNCHARGE  0        00 15 50 90 
Output voltage on batts  OUTPUTVOLTS   230      230 240 220 225 
Sensitivity              SENSITIVITY   H        H M L L 
Low battery warning      LOWBATT       2        02 05 07 10 
Shutdown grace delay     SLEEP         20       020 180 300 600 
Alarm delay              BEEPSTATE     0        0 T L N 
Wakeup delay             WAKEUP        0        000 060 180 300 
Self test interval       SELFTEST      336      336 168 ON  OFF 
===================================================================
Battery date: 07/31/99
UPS Name    : UPS_IDEN
</programlisting>

<para>At this point, you can select any item from 2) to 13) to modify the
appropriate value. You will shown the existing value and prompted
for the new values.</para>

<para>We recommend that you change the EEPROM as little as is
absolutely necessary since it is a somewhat delicate process that
has occasionally produced problems (i.e. improper EEPROM values are
displayed after the update). Fortunately this seems to be quite
rare and was much more likely to occur with the old &quot;batch&quot; like
process especially if incorrect values were supplied.</para>
</sect2>
</sect1>

</chapter>
