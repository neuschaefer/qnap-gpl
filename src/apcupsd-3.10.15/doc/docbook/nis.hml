<chapter><title>Alternate Ways To Run The Network Information Server</title>

<para><application>apcupsd</application> maintains STATUS and EVENTS
data concerning the UPS and its operation. This information can be
obtained over the network using either
<application>apcnisd</application> or
<application>apcupsd</application>'s internal network information
server, which is essentially the same code as
<application>apcnisd</application> but compiled into
<application>apcupsd</application>. Clients on the network make a
connection to the information server and send requests for status or
events data, which the server then transmits to them.</para>

<para>The information served to the network by this interface should
not be confused with master/slave mode that shares a UPS between two
or more computers. That code is described in <xref
linkend="UPS_Sharing"/> of this documentation.</para>

<para>There are three different ways to run the information server
depending on your requirements and preferences. It can be run as 1.  a
standalone program, 2. a standalone program invoked by the inetd
daemon, or 3. as a thread (or child process) of
<application>apcupsd</application> (default configuration). We
recommend option 3 unless you have specific reasons to do
otherwise. Option 3 is what is configured in by default.</para>

<sect1><title>Running the server as a child of <application>apcupsd</application></title>

<para>This is probably the simplest way to run the network information
server. To do so, you simply make sure the <emphasis
role="bold">NETSERVER</emphasis> directive in
<filename>/etc/apcupsd/apcupsd.conf</filename> is <emphasis
role="bold">on</emphasis>, and then stop and restart
<application>apcupsd.</application> It will automatically create the
server thread (or spawn an additional child process named
<application>apcnis</application>) to handle network clients. In the
case where pthreads are enabled, a new thread will be created rather
than a child process to handle the network information requests. Note,
the above modification should not be necessary if you use the default
<filename>apcupsd.conf</filename>, since it is already turned
on.</para>

<para>Although this method is simple, it affords no protection from
the outside world accessing your network server unless you
are behind a firewall. In addition, if there is a bug in the network
server code, or if a malicious user sends bad data, it may be possible
for <application>apcnis</application> to die, in which case, though it
is not supposed to, <application>apcupsd</application> may also exit,
thus leaving your machine without shutdown protection. In addition,
since <application>apcupsd</application> is running at root level, all
threads or any child process will do so also. That being said, most of
us prefer to run the server this way.</para>

<para>With <application>apcupsd</application> version 3.8.2 and later,
you may enable the TCP Libwrap subroutines to add additional
security. In this case, access to the network server will be
controlled by the statements you put in
<filename>/etc/hosts.allow</filename>.</para>

</sect1>
<sect1><title id="ApcnisdINETD">Running apcnisd from INETD</title>

<para>This is probably the most secure and most desirable way of
running the network information server. Unfortunately, it is a bit
more complicated to set up. However, once running, the server remains
unexecuted until a connection is attempted, at which point, inetd will
invoke <application>apcnisd</application>. Once
<application>apcnisd</application> has responded to the client's
requests, it will exit. None of the disadvantages of running it
standalone apply since <application>apcnisd</application> runs only
when a client is requesting data. Note, running in this manner works
only if you are using the old forking code and have pthreads
explicitly turned off. The pthreads version of
<application>apcupsd</application> does not support the shared memory
calls that are necessary for <application>apcnisd</application> to
access the internal state of
<application>apcupsd</application>.</para>

<para>An additional advantage of this method of running the network
information server is that you can call it with a TCP wrapper and thus
use access control lists (ACL) such as
<filename>hosts.allow</filename>. See the man pages for
<filename>hosts.allow</filename> for more details.</para>

<para>To configure <application>apcnisd</application> to run from
INETD, you must first put an entry in
<filename>/etc/services</filename> as follows:</para>

<programlisting>
apcnisd         3551/tcp
</programlisting>

<para>This defines the port number (3551) and the service (TCP) that
<application>apcnisd</application> will be using. This statement can
go anywhere in the services file. Normally, one adds local changes
such as these to the end of the file.</para>

<para>Next, you must modify <filename>/etc/inetd.conf</filename> to have the
following line:</para>

<programlisting>
apcnisd stream  tcp     nowait  root    /usr/sbin/tcpd  /sbin/apcnisd -i
</programlisting>

<para>If you do not want to run the TCP wrapper, then the line should
be entered as follows (not tested):</para>

<programlisting>
apcnisd stream  tcp     nowait  root    /sbin/apcnisd -i
</programlisting>

<para>Please check that the file locations are correct for your
system. Also, note that the <option>-i</option> option is necessary so
that <application>apcnisd</application> knows that it was called by
INETD. Before restarting INETD, first ensure that the <emphasis
role="bold">NETSERVER</emphasis> directive in
<filename>/etc/apcupsd/apcupsd.conf</filename> is set to <emphasis
role="bold">off</emphasis>. This is necessary to prevent
<application>apcupsd</application> from starting a child process that
acts as a server. If you change <emphasis
role="bold">NETSERVER</emphasis>, you must stop and restart
<application>apcupsd</application> for the configuration change to be
effective.</para>

<para>Finally, you must restart INETD for it to listen on port 3551.
On a Red Hat system, you can do so by:</para>

<programlisting>
/etc/rc.d/init.d/inet reload
</programlisting>

<para>At this point, when a client attempts to make a connection on
port 3551, INETD will automatically invoke
<application>apcnisd</application>.</para>

</sect1>
<sect1><title>Running <application>apcnisd</application> Standalome</title>

<para>This is probably the least desirable of the three ways to run an
<application>apcupsd</application> network information server because
if <application>apcupsd</application> is stopped, you must also stop
<application>apcnisd</application> before you can restart
<application>apcupsd</application>. This is because
<application>apcnisd</application>, when run standalone, holds the
shared memory buffer by which <application>apcnisd</application> and
<application>apcupsd</application> communicate. This prevents a new
execution of <application>apcupsd</application> from creating
it.</para>

<para>To execute <application>apcnisd</application> in standalone
mode, first ensure that the <emphasis role="bold">NETSERVER</emphasis>
directive in <emphasis
role="bold">/etc/apcupsd/apcupsd.conf</emphasis> is set to <emphasis
role="bold">off</emphasis>. This is necessary to prevent
<application>apcupsd</application> from starting a child process that
acts as a server. Restart <application>apcupsd</application> normally,
then:</para>

<programlisting>
/sbin/apcnisd
</programlisting>

<para>The advantage of running the network information server
standalone is that if for some reason, a client causes the network
server to crash, it will not affect the operation of
<application>apcupsd</application>.</para>
</sect1>
</chapter>
