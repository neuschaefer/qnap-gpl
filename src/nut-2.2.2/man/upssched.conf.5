.TH UPSSCHED.CONF 5 "Wed Nov 26 2003" "" "Network UPS Tools (NUT)"
.SH NAME
upssched.conf \- Configuration for upssched timer program

.SH DESCRIPTION

This file controls the operations of \fBupssched\fR(8), the timer\(hybased
helper program for \fBupsmon\fR(8).

.SH CONFIGURATION DIRECTIVES

.IP "CMDSCRIPT \fIscriptname\fR"
Required.  This must be above any AT lines.  This script is used to 
invoke commands when your timers are triggered.  It receives a single
argument which is the name of the timer that caused it to trigger.

.IP "PIPEFN \fIfilename\fR"
Required.  This sets the file name of the socket which will be used for
interprocess communications.  This should be in a directory where normal
users can't create the file, due to the possibility of symlinking
and other evil.
.IP
Note: if you are running Solaris or similar, the permissions that
upssched sets on this file \fBare not enough\fR to keep you safe.  If
your OS ignores the permissions on a FIFO, then you MUST put this in a
protected directory!
.IP
Note 2: by default, \fBupsmon\fR(8) will run upssched as whatever user
you have defined with RUN_AS_USER in \fBupsmon.conf\fR(8).  Make sure
that user can create files and write to files in the path you use for
PIPEFN and LOCKFN.
.IP
My recommendation: create a special directory for upssched, make it
owned by your upsmon user, then use it for both.
.IP
The stock version of the upssched.conf ships with PIPEFN disabled
to make you visit this portion of the documentation and think about how
your system works before potentially opening a security hole.

.IP "LOCKFN \fIfilename\fR"
Required.  upssched attempts to create this file in order to avoid a 
race condition when two events are dispatched from upsmon at nearly
the same time.  This file will only exist briefly.  It must not be
created by any other process.
.IP
You should put this in the same directory as PIPEFN.

.IP "AT \fInotifytype\fR \fIupsname\fR \fIcommand\fR"
Define a handler for a specific event \fInotifytype\fR on UPS
\fIupsname\fR.  \fIupsname\fR can be the special value * to apply this
handler to every UPS.
.IP
This will perform the command \fIcommand\fR when the \fInotifytype\fR
and \fIupsname\fR match the current activity.  Possible values for
\fIcommand\fR are:
.IP
START\-TIMER \fItimername\fR \fIinterval\fR
.IP
.nf
	Start a timer of \fIinterval\fR seconds.  When it triggers, it
	will pass the argument \fItimername\fR as an argument to your
	CMDSCRIPT.
.fi
.LP
.IP
Example:
.IP
.nf
	Start a timer that'll execute when any UPS (*) has been 
	gone for 10 seconds

	AT COMMBAD * START\-TIMER upsgone 10
.fi
.LP

.IP
CANCEL\-TIMER \fItimername\fR [cmd]
.IP
.nf
	Cancel a running timer called <timername>, if possible. 
        If the timer has passed then pass the optional argument
        <cmd> to CMDSCRIPT.
.fi
.LP

.IP
Example:
.IP
.nf
	If a specific UPS (myups@localhost) comes back online, then 
	stop the timer before it triggers

	AT COMMOK myups@localhost CANCEL\-TIMER upsgone
.fi
.LP

.IP
EXECUTE \fIcommand\fR
.IP
.nf
	Immediately pass <command> as an argument to CMDSCRIPT.
.fi
.LP

.IP
Example:
.IP
.nf
	If any UPS (*) reverts to utility power, then execute
	'ups\-back\-on\-line' via CMDSCRIPT.

	AT ONLINE * EXECUTE ups\-back\-on\-line
.fi
.LP

.IP
Note that any AT that matches both the \fInotifytype\fR and the
\fIupsname\fR for the current event will be used.

.SH SEE ALSO
\fBupssched\fR(8), \fBupsmon\fR(8)

.SS Internet resources:
The NUT (Network UPS Tools) home page: http://www.networkupstools.org/
