#!/usr/bin/env ruby
#
# Copyright (C) 2013 Red Hat, GmbH
# 
# Simple thinp provisioning XML metadata creation tool
#

require 'optparse'
require 'pathname'

#----------------------------------------------------------------

$prg = Pathname.new($0).basename

def check_opts(opts)
  abort "#{$prg} - 3 arguments required!" if opts.length < 3
  abort "#{$prg} - block size must be 2^^N with N > 1" if opts[:blocksize] < 2 || (opts[:blocksize] & opts[:blocksize] - 1) != 0
  abort "#{$prg} - mappings must be > 0" if opts[:mappings] < 1
  abort "#{$prg} - number of thin provisioned devices or snapshots must be > 0" if opts[:thins].nil? || opts[:thins] < 1
  abort "#{$prg} - size variation too large!" if !opts[:variation].nil? && (opts[:mappings] < 2 || (opts[:variation] >= 2 * (opts[:mappings] - 1)))
end

def parse_command_line(argv)
  opts = {}

  os = OptionParser.new do |o|
    o.banner = "Thin Provisioning XML Test Metadata Generator.\nUsage: #{$prg} [opts]"
    o.on("-b", "--block-size #SECTORS", Integer, "Block size of thin provisioned devices in sectors.") { |bs| opts[:blocksize] = bs }
    o.on("-m", "--mappings #MAPPINGS", Integer, "Number of mappings per thin device or snapshot.") { |m| opts[:mappings] = m }
    o.on("-r", "--range-mappings", "Create range mappings") { opts[:range] = true }
    o.on("-t", "--thin-devices #THINS", Integer, "Sum of thin devices and snapshots.") { |mt| opts[:thins] = mt }
    o.on("-v", "--variations #MAPPINGS]", Integer, "Mapping variation of thin devices and snapshots.") { |mv| opts[:variation] = mv }
    o.on("-h", "--help", "Output this help.") { puts o; exit }
  end

  begin
    os.parse!(argv)
  rescue OptionParser::ParseError => e
    abort "#{$prg} #{e}\n#{$prg} #{os}"
  end

  check_opts(opts)
  opts
end

def begin_superblock(blocksize, nr_data_blocks)
  "<superblock uuid=\"\" time=\"0\" transaction=\"1\" data_block_size=\"#{blocksize}\" nr_data_blocks=\"#{nr_data_blocks}\">"
end

def end_superblock
  "</superblock>"
end

def begin_device(devid, size)
  "  <device dev_id=\"#{devid}\" mapped_blocks=\"#{size}\" transaction=\"0\" creation_time=\"0\" snap_time=\"0\">"
end

def end_device
  "  </device>"
end

def single_mapping(from, to)
  "    <single_mapping origin_block=\"#{from}\" data_block=\"#{to}\" time=\"1\"/>"
end

def range_mapping(from, to, length)
  "    <range_mapping origin_begin=\"#{from}\" data_begin=\"#{to}\" length=\"#{length}\" time=\"1\"/>"
end

def this_mappings(opts)
  opts[:variation].nil? ? opts[:mappings] : ((2 * opts[:mappings] - rand(opts[:variation])) / 2)
end

def xml_metadata(opts)
  mappings, dev_id, nr_data_blocks, to = [], 0, 0, 0

  0.step(opts[:thins] - 1) do
    mappings << (m = this_mappings(opts))
    nr_data_blocks += m
  end

  puts begin_superblock(opts[:blocksize], nr_data_blocks)
  mappings.each do |b|
    if opts[:range]
      puts begin_device(dev_id, b), range_mapping(0, to, b), end_device
    else
      puts begin_device(dev_id, b)
      0.step(b - 1) { |from| puts single_mapping(from, to + from) }
      puts end_device
    end
    dev_id += 1
    to += b
  end
  puts end_superblock
end


#----------------------------------------------------------------
# Main
#
xml_metadata(parse_command_line(ARGV))
