New in version 0.54.1
  * Changed the expat autotools options again, the method being used was messy
    now it uses a standard AC_CHECK_LIB and AC_CHECK_HEADER to find hthe lib
    if the lib is in a non standard location then this can be set by passing 
    approprate LDFLAGS and CFLAGS options to set -L and -I as approprate

New in version 0.54
 * Applied Jeff Lawson's patches to fix bugs #629254,#621435
 * Removed libxml2 for the moment as the compatability headers are a licence
   nightmare as they drag in php code and thats GPL incompatable and could be
   a nasty shock for an unsuspecting user, following advice from debian packaging
 * Cleaned up the --with-expat=[location] option, default is now to use shared libexpat
   if its not in /usr/lib and /usr/include override with command line option.
 * remove expat from source tree. The expat we carred was GPL the newer expats
   are MIT type licences.

New in version 0.53
 * Updated windows project files. Minimum VC version .NET 2003. Requires libiconv
   installed - please download and install setup from gnu.org
 - Removed all .dll and .lib files, they will be generated when required
 - Fixed a few more gcc-4.X warnings that were previously missed in local expat
   and samples directory as well as a few when libxml2 is used.

New in version 0.52
 * No actual ABI changes, build fixes only in this release, API is unchanged 
   except for typedef queue below and rename of library.
 - Option to use shared libexpat, use --with-shared-expat on configure
 - Option to use shared libxml2 as xmlparser, use --with-shared-libxml
 - Fix a number of portability issues
 - rename library to xmlrpc-epi to avoid common name clashes with other xmlrpc
   libraries 
 - rename queue to avoid common clashes with other typedef queues
 - Update autotools and regenerate all macros and scripts
 - Ship all autotools macros so autotools is not required on compiling users
   system

New in version 0.51
 - Should builds on windows - thanks to Jeff Lawson.
 - Fault code interrogation
 - small sample code updates

 - fix: non UTF-8 encoding conversions failed.
 - fix: returned faults should be a single struct instead of an array of 1 struct
 - fix: default to writing xmlrpc

New in version 0.50
 - Experimental support for SOAP
 - XMLRPC_SetIsVector can now change type of pre-existing vector, 
   provided vector contains no elements
 - modified iso_8601 functions to handle dashes in date string
 - added API: XMLRPC_RequestGet/SetError
 - added API: XMLRPC_DupValueNew to recursively copy (dup) a value.
 - added API: XMLRPC_GetValueTypeEasy 

 - fix: never return methodname in a methodResponse. 
 - fix: treat xmlrpc_empty (null) as empty string <string/>

New in version 0.41
 - fix bug 440087, possible memory corruption if null is passed to XMLRPC_SetValueBase64
 - fix bug 433302. extra <param> in <fault>
 - fix system.methodSignature and system.methodHelp which were broken by introspection rewrite
 - fix endless loop in system.multiCall
 - add XMLRPC_GetVersionString() for library version info
 - add hello client/server, very simple examples.

New in version 0.40:
 - modified xmlrpc serialization code such that an extra array is no longer required when returning 
   vector data. Note that this has a small potential to break some existing apps, but it is 
   "the right thing".
 - re-wrote introspection API.  Now we use a smaller API and support describing methods via a 
   simple xml vocabulary.  This moves the model closer to javadoc, doc++, etc. Further, as a 
   performance feature, we now support introspection callbacks so that nothing is generated until 
   documentation is actually requested via one of the system.* methods.
 - fixed various samples that were written before the xml-rpc integration and were leading people astray.
 - added new API: XMLRPC_VectorRemoveValue()
 - added new API: XMLRPC_Free()
 - new/updated system methods:
    - system.getCapabilities()
    - system.multiCall ()
    - system.describeMethods ()
    
